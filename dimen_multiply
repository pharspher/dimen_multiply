#!/usr/bin/perl
use Getopt::Long;

my $use_floor = 0;
my $src_file;
my $dst_file;
my $src_res;
my $dst_res;
my $tran_expr;

GetOptions(
		'floor!' => \$use_floor,
		'r=s' => \$tran_expr,
		'src=s' => \$src_file,
		'dst=s' => \$dst_file,
);

parse_resolution($tran_expr);

sub parse_resolution {
	$param = lc $_[0];
	print $param;
	$pattern = "fullhd|hd|qhd|wvga|wvga_l|hvga";
	my ($src_res, $dst_res) = $param =~ m/(fullhd|hd|qhd|wvga|wvga_l|hvga)_to_(fullhd|hd|qhd|wvga|wvga_l|hvga)/;
#print $src_res." to ".$dst_res;
}

my %res_multiplier = (
		FULLHD => 2.0,
		HD => 1.33,
		QHD => 1.0,
		WVGA => 1.0,
		WVGA_L => 1.0,
		HVGA => 0.66,
);

print "$rule\n";
print "$src[0]  $src[1]\n";
print "@dst\n";
print "$all";

my $argc = $#ARGV + 1;
if ($argc != 4 || $argc != 6) {
	print "Invalid input\nUsage: dimen_multiply -r [floor|ceiling] -src/[xxhdpi|xhdpi|hdpi|wvga] SRC_FILE -dst/[xxhdpi|xhdpi|hdpi|wvga] DST_FILE\n";
	exit 0;
}

my $use_floor = 0;

if ($argc != 4 || $ar) {
}

my $src_file = $ARGV[1];
if (! -e $src_file) {
	print "Source file \"$ARGV[1]\" doesn't exist\n";
	exit 0;
}
my $src_multiplier = $res_multiplier{uc $ARGV[0]};

my $dst_file = $ARGV[3];
while (-e $dst_file) {
	$dst_file = $dst_file."_new";
}
my $dst_multiplier = $res_multiplier{uc $ARGV[2]};

my $multiplier = $src_multiplier / $dst_multiplier;

print "$multiplier\n";

=star commenct
if ($ARGV[0] =~ m/(\d+)/) {
	$multiplier = $1;
} else {
	print "Error input pararmeter\nUsage: dimen_multiply.pl MULTIPLIER SOURCE_FILE > TARGET_FILE\n";
	exit 0;
}

open(INPUT_FILE, $ARGV[1]);
while(<INPUT_FILE>) {
	chomp;
	my $line = $_;
	if (($head, $sign, $dimen, $unit, $tail) = $line =~ m/(\s*<dimen name="\S+">)([\+-]*)(\d+)(\S+)(<\/dimen>)/) {
		$new_dimen = ($unit eq 'px') ? int($dimen / $multiplier) : $dimen;
		print "$head$sign$new_dimen$unit$tail\n";
	} else {
		print "$line\n";
	}
}
=end comment
=cut

